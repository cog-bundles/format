---
cog_bundle_version: 4
name: format
description: Pipeline output formatting utilities
version: 0.5.0
docker:
  image: cogcmd/format
  tag: 0.5.0
commands:
  head:
    executable: "/home/bundle/cog-command"
    description: Pass through only the first N results. Defaults to 10 results."
    arguments: "[count]"
    rules:
    - allow
  fields:
    executable: "/home/bundle/cog-command"
    description: List the fields in an input object
    long_description: |
      Returns a sorted list of all the top-level keys in an input
      object.

      Returns nothing if run without input (e.g., at the beginning of
      a pipeline).
    rules:
    - allow
  list:
    description: Build list of values from pipeline input
    long_description: |
      Builds a string representation of a list of values from pipeline input
      with each item separated by a customizable delimiter.
    executable: "/home/bundle/cog-command"
    options:
      order:
        description: 'Sort order for list. Allowed values are: asc, desc'
        type: string
        required: false
        short_flag: o
      join:
        description: Delimiter to use between list items. Default is ", "
        type: string
        required: false
        short_flag: j
    rules:
    - allow
  pluck:
    executable: "/home/bundle/cog-command"
    description: Return a nested object from the input
    arguments: "<path>"
    options:
      as:
        description: Return results in a field named with the value of this option
        type: string
        required: false
    rules:
    - allow
  table:
    description: Generate a table from pipeline output
    executable: "/home/bundle/cog-command"
    arguments: field1 field2 ... fieldN
    documentation: |
      Each field is taken to be a key that should be extracted from an
      input map.

      When the field is a string like "foo", this means "select the
      value of the 'foo' key".

      Alternatively, a path can be provided, as in "foo.bar.baz". This
      will produce a column named "baz", with values found at that key
      path. For instance, when run on the object

        {"foo": {"bar": {"baz": "hello world"}}}

      the string "foo.bar.baz" will extract the value
      "hello world".

      Fields may be renamed, as well. Passing a quoted string like
      "foo=bar" will produce a column labeled "foo", with the value of
      the "bar" key. Paths can be renamed in the same way, if desired
      (e.g. "foo=foo.bar.baz"). Note that these pairs *must* be quoted
      to parse correctly.

      If such a column name transformation will result in a duplicate
      name, the full keypath will be used instead.

      However, these conventions mean that this command may not
      operate well on fields that contain "=" or "." characters.
    examples: |
      seed '[{"foo": "hello", "bar": "world"},
             {"foo": "hola", "bar": "mundo"}]'
        | format:table foo bar
      +-------+-------+
      |  foo  |  bar  |
      +-------+-------+
      | hello | world |
      | hola  | mundo |
      +-------+-------+

      seed '[{"foo": "hello", "bar": "world"},
             {"foo": "hola", "bar": "mundo"}]'
        | format:table "key=foo" "value=bar"
      +-------+-------+
      |  key  | value |
      +-------+-------+
      | hello | world |
      | hola  | mundo |
      +-------+-------+

      seed '[{"foo": {"greeting": "hello", "valediction": "good-bye"}, "bar": "world"},
             {"foo": {"greeting": "hola", "valediction": "adios"}, "bar": "mundo"}]'
        | format:table foo.greeting bar

      +----------+-------+
      | greeting |  bar  |
      +----------+-------+
      | hello    | world |
      | hola     | mundo |
      +----------+-------+

      seed '[{"foo": {"greeting": "hello", "valediction": "good-bye"}, "bar": "world"},
             {"foo": {"greeting": "hola", "valediction": "adios"}, "bar": "mundo"}]'
        | format:table "farwell=foo.valediction" bar
      +----------+-------+
      | farwell  |  bar  |
      +----------+-------+
      | good-bye | world |
      | adios    | mundo |
      +----------+-------+

      seed '[{"foo": {"bar": "inside"}, "bar": "outside"},
             {"foo": {"bar": "also inside"}, "bar": "also outside"}]'
        | format:table bar foo.bar
      +--------------+-------------+
      |     bar      |   foo.bar   |
      +--------------+-------------+
      | outside      | inside      |
      | also outside | also inside |
      +--------------+-------------+
    rules:
    - allow
  tail:
    executable: "/home/bundle/cog-command"
    description: Pass through only the last N results. Defaults to 10 results.
    arguments: "[count]"
    rules:
    - allow
templates:
  preformatted:
    body: |
      ```
      ~$results[0].body~
      ```
  fields:
    body: "**Fields:** ~join var=$results[0].fields~~$item~~end~\n"
